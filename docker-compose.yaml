version: '3.1'

services:

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: setup
    user: "0"
    command: >
      bash -c '
        echo "Setup...";
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        touch config/done;
        echo "Waiting for Elasticsearch availability...";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password...";
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!"
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/done ]"]
      interval: 1s
      timeout: 5s
      retries: 300
    networks:
      - elastic

  app:
    build:
      context: ./ElasticsearchExample
      dockerfile: Dockerfile
    container_name: app
    environment:
      - IS_DEMO=${IS_DEMO}
      - DemoSeedingOptions:CustomersCount=${DEMO_CUSTOMERS_COUNT}
      - DemoSeedingOptions:ProductsCount=${DEMO_PRODUCTS_COUNT}
      - DemoSeedingOptions:OrdersCount=${DEMO_ORDERS_COUNT}
      - DemoSeedingOptions:OrdersPeriodInYears=${DEMO_ORDERS_PERIOD_IN_YEARS}
      - ElasticsearchOptions:ConnectionUsername=elastic
      - ElasticsearchOptions:ConnectionPassword=${ELASTIC_PASSWORD}
    ports:
      - "8040:80"
      - "44340:443"
    depends_on:
      sqlServer:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - elastic

  sqlServer:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    depends_on:
      setup:
        condition: service_healthy
    container_name: sqlServer
    volumes:
      - sqlserver-data:/data
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_PASSWORD}
    ports:
      - "1433:1433"
    healthcheck:
      test: [
        "CMD", "/opt/mssql-tools/bin/sqlcmd", 
        "-U", "sa", 
        "-P", "${MSSQL_PASSWORD}", 
        "-Q", "SELECT \"READY\""]
      interval: 15s
      timeout: 5s
      retries: 300
    networks:
      - elastic

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - ${ES_PORT}:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - xpack.watcher.enabled=false
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I -u elastic:${ELASTIC_PASSWORD} http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 300
    networks:
      - elastic

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 300
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local
  sqlserver-data:
    driver: local
  kibana-data:
    driver: local